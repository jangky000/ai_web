▷ /src/jdbc/news.sql
-------------------------------------------------------------------------------------
1. news 테이블의 생성 
   - PRIMARY KEY(newsno)
     newsno 컬럼에 같은 값이 2번이상 등록되는 것을 차단,
     테이블에서 레코드를 고유하게 구분하는 역활을 함.
 
   - 테이블은 1개이상의 PK(Primary Key)를 가지고 있어야합니다.
     예) 상품 번호, 사원 번호, 주민등록 번호, 전화 번호, 송장 번호,
          지역 코드, 업무 코드, 부서 코드...
 
-- /mysql56/bin/mysqld.exe를 먼저 실행 후 SQL을 실행 합니다.
-- 주석 표시 다음에는 공백을 한칸이상 꼭 띄웁니다.
-- PRIMARY KEY: 레코드를 고유하게 구분하는 번호 또는 문자를 저장하는 컬럼에 적용
--                   Excel에서 행마다 선언하는 업무 처리 번호 
CREATE TABLE news(        -- news: 테이블명, Excel sheet 이름과 동일
  newsno   INT,                -- 컬럼, 뉴스 고유 기사 번호, Excel 컬럼
  title        VARCHAR(20),  -- 컬럼, 제목, 한글/영어/숫자 20자, 사용하고 남은 메모리 재사용  
  rdate      DATETIME,       -- 컬럼, 등록일(날짜/시간) 
  PRIMARY KEY(newsno)   
);  
-- PRIMARY KEY(newsno): 고유한 값만 newsno 컬럼에 할당 가능

DROP TABLE news;
 
-- 생성된 테이블 목록: 
SHOW TABLES;
+------------------+
| Tables_in_javadb |
+------------------+
| news             |
+------------------+
 
 
2. 테이블 삭제
DROP TABLE news;
  
 
3. 등록
   - '': 문자열 값의 시작과 종료를 나타냅니다.
   - now(): MySQL 함수, 현재 날짜와 시간을 만듭니다.
   
1) 날짜의 산출
mysql> SELECT now();
+---------------------+
| now()               |
+---------------------+
| 2015-08-07 19:52:28 |
+---------------------+
 
 
2) 일반적인 등록
-- Duplicate entry '1' for key 'PRIMARY': 1번은 PK임으로 중복되면 안됨.
    INSERT INTO news(newsno, title, rdate)
    VALUES(1, '한강 전 구간에 다시 조류경보', now());
    
 
    SELECT * FROM news; -- *: 모든 컬럼
+--------+---------------------------------+-----------------------+
| newsno | title                           | rdate                 |
+--------+---------------------------------+-----------------------+
|   1    | 한강 전 구간에 다시 조류경보     | 2015-10-06 19:56:52   |
+--------+---------------------------------+-----------------------+    
 
 
3) ""의 등록
   - 문자열의 시작과 종료를 " ' ", " ' "(Single quotation)로 사용합니다.
   - java: System.out.println("동시방류 6차례...\"효과 없다\"");
 
   INSERT INTO news(newsno, title, rdate)
   VALUES(2, '동시방류 6차례..."효과 없다"', now());
 
   SELECT * FROM news;
+--------+------------------------------------------+---------------------+
| newsno | title                                    | rdate               |
+--------+------------------------------------------+---------------------+
|      1 | 한강 전 구간에 다시 조류경보             | 2015-12-03 19:43:17 |
|      2 | 동시방류 6차례..."효과 없다"             | 2015-12-03 19:47:54 |
+--------+------------------------------------------+---------------------+
 
 	INSERT INTO news(newsno, title, rdate)
   VALUES(3, '이통3사 사내유보금 \'27조 원\'', now());
   
	SELECT * FROM news;
  
4. 조회 목록
   1) 모든 컬럼의 모든 레코드 출력
      SELECT * FROM news;
+--------+------------------------------------------+---------------------+
| newsno | title                                    | rdate               |
+--------+------------------------------------------+---------------------+
|      1 | 한강 전 구간에 다시 조류경보             | 2016-10-25 21:56:25 |
|      2 | 동시방류 6차례..."효과 없다"             | 2016-10-25 22:01:22 |
|      3 | 이통3사 사내유보금 '27조 원'             | 2016-10-26 19:49:09 |
|      4 | 철도파업 한 달째..'82.8%'                | 2016-10-26 19:57:08 |
+--------+------------------------------------------+---------------------+
     
   2) newsno, title 컬럼만 출력하고 newsno 컬럼을 기준으로 오름차순
      정렬을 진행합니다.
      - ORDER BY newsno ASC: newsno 컬럼 기준으로 오름 차순 출력
      - ORDER BY newsno DESC: newsno 컬럼 기준으로 내림 차순 출력
      
     SELECT newsno, title
     FROM news
     ORDER BY newsno ASC;
+--------+------------------------------------------+
| newsno | title                                    |
+--------+------------------------------------------+
|      1 | 한강 전 구간에 다시 조류경보             |
|      2 | 동시방류 6차례..."효과 없다"             |
|      3 | 이통3사 사내유보금 '27조 원'             |
|      4 | 철도파업 한 달째..'82.8%'                |
+--------+------------------------------------------+
        
  3) newsno 컬럼을 기준으로 내림차순 정렬을 진행합니다.
     - 가장 고가의 상품 먼저 출력
  
     SELECT newsno, title
     FROM news
     ORDER BY newsno DESC;
+--------+------------------------------------------+
| newsno | title                                    |
+--------+------------------------------------------+
|      4 | 철도파업 한 달째..'82.8%'                |
|      3 | 이통3사 사내유보금 '27조 원'             |
|      2 | 동시방류 6차례..."효과 없다"             |
|      1 | 한강 전 구간에 다시 조류경보             |
+--------+------------------------------------------+
 
  4) SQL은 한줄로도 표현 가능(식별이 잘 안되어 권장 아님)  
     SELECT newsno, title, rdate FROM news ORDER BY newsno DESC;
 
 
5. 한건 조회
   - 보통 한건이나 특정 조건의 레코드를 출력하는 기능을 말합니다.
   - WHERE 문은 Java의 IF문과 같은 기능을 합니다. 
   - WHERE newsno = 1: newsno 컬럼의 값이 1인 레코드 출력
   - WHERE 문은 일반적인 관계 연산자를 사용 가능합니다.
     예) newsno > 1, newsno < 1, newsno >= 1, newsno <= 1, =, !=
         OR, AND, NOT, <>, ()등도 사용 가능
   
   SELECT newsno, title
   FROM news
   WHERE newsno = 1;
 
+--------+------------------------------------------+
| newsno | title                                    |
+--------+------------------------------------------+
|        1 | 한강 전 구간에 다시 조류경보            |
+--------+------------------------------------------+
 
 
6. 수정
   - 컬럼의 값을 변경합니다.
   - WHERE문 생략시 모든 레코드가 변경됨으로 일반적으로
     WHERE를 사용합니다.
   
1) 수정
   - 모든 레코드 변경(권장 아님) 
   UPDATE news
   SET title = '김치 종주국의 잃어버린 명예';
 
   SELECT newsno, title, rdate
   FROM news
   ORDER BY newsno ASC;
+--------+-----------------------------------------+---------------------+
| newsno | title                                   | rdate               |
+--------+-----------------------------------------+---------------------+
|      1 | 김치 종주국의 잃어버린 명예             | 2016-10-25 21:56:25 |
|      2 | 김치 종주국의 잃어버린 명예             | 2016-10-25 22:01:22 |
|      3 | 김치 종주국의 잃어버린 명예             | 2016-10-26 19:49:09 |
|      4 | 김치 종주국의 잃어버린 명예             | 2016-10-26 19:57:08 |
+--------+-----------------------------------------+---------------------+
   
   - 특정 레코드만 변경(권장)
   UPDATE news
   SET title = '내일 출근 빙판길 우려...'
   WHERE newsno = 1;
   
2) 수정한 내용 확인
   SELECT newsno, title
   FROM news
   WHERE newsno = 1;
+--------+-----------------------------------+
| newsno | title                             |
+--------+-----------------------------------+
|      1 | 내일 출근 빙판길 우려...          |
+--------+-----------------------------------+
 
3) 2 번 레코드의 title='한반도서 지진 7.0 발생할 수도' 변경
   UPDATE news
   SET title = '한반도서 지진 7.0 발생할 수도'
   WHERE newsno = 2;
 
4) 3 번 레코드의 title='4대강 다시 자연으로' 변경
   UPDATE news
   SET title = '4대강 다시 자연으로'
   WHERE newsno = 3;
 
5) 변경확인
   SELECT newsno, title
   FROM news
   ORDER BY newsno ASC;
 
 newsno title
 ------ ------------------
      1 내일 출근 빙판길 우려...
      2 한반도서 지진 7.0 발생할 수도
      3 4대강 다시 자연으로
      4 저무는 스마트폰 왕국...
    
  
7. 삭제
   - WHERE 문을 생략하면 모든 레코드가 삭제됩니다.
    
1) 삭제
   - 모든 레코드 삭제(권장하지 않음)
     DELETE FROM news;
   
   - 특정 레코드 삭제(권장)
     DELETE FROM news
     WHERE newsno = 4;
   
2) 삭제 확인   
   SELECT newsno, title
   FROM news
   ORDER BY newsno ASC;
 
 newsno title
 ------ ------------------
      1 내일 출근 빙판길 우려...
      2 한반도서 지진 7.0 발생할 수도
      3 4대강 다시 자연으로
   
3) newsno 컬럼의 값이 3인 레코드 삭제
DELETE FROM news
WHERE newsno = 3;
 
4) newsno 컬럼의 값이 2인 레코드 삭제
DELETE FROM news
WHERE newsno = 2;

3) newsno 컬럼의 값이 1인 레코드 삭제
DELETE FROM news
WHERE newsno = 1;


   SELECT newsno, title
   FROM news
   ORDER BY newsno ASC;
   
